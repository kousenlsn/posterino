{"version":3,"sources":["serviceWorker.js","redux/actions/postsAction.js","redux/actions/actionTypes.js","components/posts/postList/postListStyles.js","components/posts/postList/postListView.jsx","components/posts/postList/postList.jsx","components/posts/postEntry/postEntryStyles.js","components/posts/postEntry/postEntryView.jsx","components/posts/postEntry/postEntry.jsx","components/page/routes/invalidRoute.jsx","components/page/routes/index.js","components/page/nav/navStyles.js","components/page/nav/navView.jsx","components/page/nav/nav.jsx","components/page/notification/toast.js","redux/actions/pageActions.js","style/theme.js","redux/store/defaultState.js","redux/reducers/postsReducer.js","redux/reducers/pageReducer.js","redux/reducers/index.js","redux/store/configureStore.js","app.jsx","index.js"],"names":["Boolean","window","location","hostname","match","UNAVAILABLE_SERVICE_MESSAGE","fetchPostsSuccess","result","type","payload","fetchPosts","notify","dispatch","a","axios","get","posts","data","message","response","persistPostSuccess","post","styles","theme","container","margin","pageBreadcrumbsSection","display","paperContainer","padding","background","paper","minHeight","position","spinner","textAlign","paddingTop","backgroundColor","primaryColor","listEntryContainer","minWidth","overflow","textOverflow","whiteSpace","title","fontSize","subtitle","opacity","description","color","Content","Layout","withStyles","isLoading","classes","delay","duration","className","key","separator","Item","size","itemLayout","dataSource","renderItem","item","Id","actions","to","id","Meta","body","PostList","this","props","length","React","Component","connect","state","ownProps","page","fetchCallsInProgress","entries","headerContainer","marginTop","marginBottom","marginRight","flexGrow","actionsContainer","float","button","width","borderColor","primaryColorHover","inputContainer","marginLeft","paddingBottom","titleContainer","inputText","borderTop","borderLeft","borderRight","inputDisabled","border","cursor","dark","resize","isPosting","user","isEditMode","toggleEdit","editChanges","confirmEdit","useState","showValidationErrors","toggleValidationErrors","validations","field","isFieldInvalid","params","postId","search","style","onClick","Object","keys","some","disabled","gutter","xs","lg","layout","validateStatus","help","placeholder","value","onChange","e","target","TextArea","autosize","minRows","maxRows","name","username","email","address","city","zipcode","company","when","PostEntry","postForm","callback","setState","toggle","assign","postEntry","saveChanges","savePost","fetchOwner","userId","then","r","query","qs","parse","ignoreQueryPrefix","edit","history","push","userEntry","postCallsInProgress","find","p","parseInt","Promise","resolve","setTimeout","nextPost","trim","persistPost","InvalidRoute","backText","desc","exact","path","component","zIndex","height","paddingLeft","paddingRight","flex","alignItems","flexRight","icon","secondaryColor","secondaryColorHover","resetData","Header","align","justify","src","NavComponent","ToastContainer","notification","config","placement","prevProps","newMessages","notifications","filter","prev","newErrors","errors","forEach","success","onClose","clearError","error","errorMessages","notificationMessages","clearNotification","notificationKey","errorKey","postsReducer","defaultState","action","map","actionType","split","actionStatus","pop","pageReducer","Date","toISOString","replace","code","statusCode","combineReducers","persistConfig","storage","stateReconciler","autoMergeLevel2","whitelist","persistedReducer","persistReducer","rootReducer","storeConfig","initialState","store","createStore","composeWithDevToolsLogOnly","applyMiddleware","thunk","persistor","persistStore","configureStore","App","loading","basename","posterinoTheme","overflowY","routes","Footer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acd559ea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nimport {\n  FETCH_POSTS_SUCCESS,\n  FETCH_POSTS_REQUEST,\n  FETCH_POSTS_FAILURE,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_REQUEST,\n  DELETE_POST_FAILURE,\n  PERSIST_POST_SUCCESS,\n  PERSIST_POST_REQUEST,\n  PERSIST_POST_FAILURE,\n  FETCH_OWNER_REQUEST,\n  FETCH_OWNER_SUCCESS,\n  FETCH_OWNER_FAILURE\n} from \"./actionTypes\";\n\nconst UNAVAILABLE_SERVICE_MESSAGE =\n  \"Unable to reach the service, please try again later.\";\nconst MOCKED_DELAY = 400;\n\nexport function fetchPostsSuccess(result) {\n  return { type: FETCH_POSTS_SUCCESS, payload: result };\n}\nexport function fetchPostsRequest() {\n  return { type: FETCH_POSTS_REQUEST };\n}\nexport function fetchPostsFailure(error) {\n  return { type: FETCH_POSTS_FAILURE, payload: error };\n}\n\nexport function fetchPosts(notify) {\n  return async dispatch => {\n    dispatch(fetchPostsRequest());\n\n    try {\n      let result = await axios.get(\"http://jsonplaceholder.typicode.com/posts\");\n\n      return dispatch(\n        fetchPostsSuccess({\n          posts: result.data,\n          message: notify && \"Successfully updated data.\"\n        })\n      );\n    } catch (error) {\n      return dispatch(\n        fetchPostsFailure(\n          error.response\n            ? error.response.data\n            : { message: UNAVAILABLE_SERVICE_MESSAGE }\n        )\n      );\n    }\n  };\n}\n\nexport function deletePostSuccess(results) {\n  return { type: DELETE_POST_SUCCESS, payload: results };\n}\nexport function deletePostRequest() {\n  return { type: DELETE_POST_REQUEST };\n}\nexport function deletePostFailure(error) {\n  return { type: DELETE_POST_FAILURE, payload: error };\n}\n\nexport function deletePost(postId) {\n  return async dispatch => {\n    dispatch(deletePostRequest());\n\n    try {\n      // MOCKED DELETE\n      return await new Promise(resolve => {\n        setTimeout(() => {\n          resolve(dispatch(deletePostSuccess(postId)));\n        }, MOCKED_DELAY);\n      });\n    } catch (error) {\n      return dispatch(\n        deletePostFailure(\n          error.response\n            ? error.response.data\n            : { message: UNAVAILABLE_SERVICE_MESSAGE }\n        )\n      );\n    }\n  };\n}\n\nexport function persistPostSuccess(post) {\n  return { type: PERSIST_POST_SUCCESS, payload: post };\n}\nexport function persistPostRequest() {\n  return { type: PERSIST_POST_REQUEST };\n}\nexport function persistPostFailure(error) {\n  return { type: PERSIST_POST_FAILURE, payload: error };\n}\n\nexport function persistPost(post) {\n  return async dispatch => {\n    dispatch(persistPostRequest());\n\n    try {\n      // MOCKED PERSIST\n      return await new Promise(resolve => {\n        setTimeout(() => {\n          const nextPost = Object.assign({}, post, {\n            title: post.title.trim(\" \")\n          });\n\n          resolve(\n            dispatch(\n              persistPostSuccess({\n                post: nextPost,\n                message: \"Successfully saved post.\"\n              })\n            )\n          );\n        }, MOCKED_DELAY);\n      });\n    } catch (error) {\n      return dispatch(\n        persistPostFailure(\n          error.response\n            ? error.response.data\n            : { message: UNAVAILABLE_SERVICE_MESSAGE }\n        )\n      );\n    }\n  };\n}\n\nexport function fetchPostOwnerSuccess(user) {\n  return { type: FETCH_OWNER_SUCCESS, payload: user };\n}\nexport function fetchPostOwnerRequest() {\n  return { type: FETCH_OWNER_REQUEST };\n}\nexport function fetchPostOwnerFailure(error) {\n  return { type: FETCH_OWNER_FAILURE, payload: error };\n}\n\nexport function fetchPostOwner(userId) {\n  return async dispatch => {\n    dispatch(fetchPostOwnerRequest());\n\n    try {\n      let result = await axios.get(\n        `http://jsonplaceholder.typicode.com/users/${userId}`\n      );\n\n      return dispatch(fetchPostOwnerSuccess(result.data));\n    } catch (error) {\n      return dispatch(\n        fetchPostOwnerFailure(\n          error.response\n            ? error.response.data\n            : { message: UNAVAILABLE_SERVICE_MESSAGE }\n        )\n      );\n    }\n  };\n}\n","export const CLEAR_NOTIFICATION = \"CLEAR_NOTIFICATION\";\nexport const CLEAR_ERROR = \"CLEAR_ERROR\";\n\nexport const FETCH_POSTS_REQUEST = \"FETCH_POST_REQUEST\";\nexport const FETCH_POSTS_SUCCESS = \"FETCH_POST_SUCCESS\";\nexport const FETCH_POSTS_FAILURE = \"FETCH_POST_FAILURE\";\n\nexport const DELETE_POST_REQUEST = \"DELETE_POST_REQUEST\";\nexport const DELETE_POST_SUCCESS = \"DELETE_POST_SUCCESS\";\nexport const DELETE_POST_FAILURE = \"DELETE_POST_FAILURE\";\n\nexport const PERSIST_POST_REQUEST = \"PERSIST_POST_REQUEST\";\nexport const PERSIST_POST_SUCCESS = \"PERSIST_POST_SUCCESS\";\nexport const PERSIST_POST_FAILURE = \"PERSIST_POST_FAILURE\";\n\nexport const FETCH_OWNER_REQUEST = \"FETCH_OWNER_REQUEST\";\nexport const FETCH_OWNER_SUCCESS = \"FETCH_OWNER_SUCCESS\";\nexport const FETCH_OWNER_FAILURE = \"FETCH_OWNER_FAILURE\";\n","const styles = theme => ({\n  container: {\n    margin: \"0 16px\"\n  },\n  pageBreadcrumbsSection: {\n    margin: \"16px 0\",\n    display: \"inline-block\"\n  },\n  paperContainer: {\n    padding: 24,\n    background: theme.paper,\n    minHeight: 400,\n    position: \"relative\"\n  },\n\n  spinner: {\n    textAlign: \"center\",\n    paddingTop: 50,\n    \"& span\": {\n      \"& i\": {\n        backgroundColor: theme.primaryColor\n      }\n    }\n  },\n\n  listEntryContainer: {\n    minWidth: 0,\n    \"& .ant-list-item-meta-content\": {\n      minWidth: 0\n    },\n    \"& .ant-list-item-meta-title\": {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\"\n    }\n  },\n  title: {\n    fontSize: 20\n  },\n  subtitle: {\n    fontSize: 15,\n    opacity: 0.6\n  },\n  description: {\n    color: theme.primaryColor,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\"\n  }\n});\n\nexport default styles;\n","import React from \"react\";\nimport withStyles from \"react-jss\";\nimport { Link } from \"react-router-dom\";\n\nimport styles from \"./postListStyles\";\n\nimport QueueAnim from \"rc-queue-anim\";\nimport { Layout, Breadcrumb, Spin, List } from \"antd\";\nconst { Content } = Layout;\n\nconst PostList = ({ isLoading, posts, classes }) => {\n  return (\n    <QueueAnim delay={50} duration={[500, 0]} type=\"left\">\n      <Content className={classes.container} key=\"postsList\">\n        <div>\n          <Breadcrumb className={classes.pageBreadcrumbsSection} separator=\">\">\n            <Breadcrumb.Item>Page</Breadcrumb.Item>\n            <Breadcrumb.Item>Posts</Breadcrumb.Item>\n          </Breadcrumb>\n        </div>\n\n        <div className={classes.paperContainer}>\n          {isLoading ? (\n            <div className={classes.spinner}>\n              <Spin size=\"large\" />\n            </div>\n          ) : (\n            <div>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={posts}\n                renderItem={item => (\n                  <List.Item\n                    key={item.Id}\n                    actions={[\n                      <Link to={`/posts/${item.id}?edit=true`}>edit</Link>\n                    ]}\n                  >\n                    <List.Item.Meta\n                      className={classes.listEntryContainer}\n                      title={\n                        <Link to={`/posts/${item.id}`}>\n                          <span className={classes.title}>\n                            {item.title} &nbsp;\n                          </span>\n                          <span className={classes.subtitle}>\n                            post #{item.id}\n                          </span>\n                        </Link>\n                      }\n                      description={\n                        <div className={classes.description}>{item.body}</div>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            </div>\n          )}\n        </div>\n      </Content>\n    </QueueAnim>\n  );\n};\n\nexport default withStyles(styles)(PostList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchPosts } from \"../../../redux/actions/postsAction\";\n\nimport PostListView from \"./postListView\";\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    if (this.props.posts.length < 1) this.props.fetchPosts();\n  }\n\n  render() {\n    return (\n      <PostListView isLoading={this.props.isLoading} posts={this.props.posts} />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  isLoading: state.page.fetchCallsInProgress > 0,\n  posts: state.posts.entries\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPosts: () => dispatch(fetchPosts())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostList);\n","const styles = theme => ({\n  container: {\n    margin: \"0 16px\"\n  },\n  headerContainer: {\n    display: \"flex\"\n  },\n  pageBreadcrumbsSection: {\n    marginTop: 16,\n    marginBottom: 16,\n    marginRight: 16,\n    display: \"inline-block\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n    flexGrow: 1\n  },\n  actionsContainer: {\n    float: \"right\",\n    display: \"flex\",\n    margin: \"10px 0\"\n  },\n  button: {\n    width: \"100%\",\n    backgroundColor: theme.primaryColor,\n    borderColor: theme.primaryColor,\n    \"&:hover\": {\n      backgroundColor: theme.primaryColorHover\n    }\n  },\n\n  paperContainer: {\n    padding: 24,\n    background: theme.paper,\n    position: \"relative\"\n  },\n\n  spinner: {\n    textAlign: \"center\",\n    paddingTop: 50,\n    \"& span\": {\n      \"& i\": {\n        backgroundColor: theme.primaryColor\n      }\n    }\n  },\n\n  inputContainer: {\n    marginLeft: 12,\n    marginBottom: 7,\n    paddingBottom: 3\n  },\n\n  titleContainer: {\n    margin: 0,\n    paddingBottom: 0\n  },\n\n  title: {\n    fontSize: 20,\n    padding: \"4px 11px\"\n  },\n\n  subtitle: {\n    opacity: 0.6\n  },\n\n  inputText: {\n    borderTop: \"none\",\n    borderLeft: \"none\",\n    borderRight: \"none\"\n  },\n\n  inputDisabled: {\n    border: \"none\",\n    cursor: \"default !important\",\n    backgroundColor: \"white !important\",\n    color: theme.dark,\n    resize: \"none\",\n    \"& input\": {\n      border: \"none\",\n      cursor: \"default !important\",\n      backgroundColor: \"white !important\",\n      resize: \"none\",\n      \"& span\": {\n        display: \"none\"\n      }\n    }\n  }\n});\n\nexport default styles;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport withStyles from \"react-jss\";\nimport { Prompt } from \"react-router\";\n\nimport styles from \"./postEntryStyles\";\n\nimport QueueAnim from \"rc-queue-anim\";\nimport { Row, Col, Layout, Breadcrumb, Spin } from \"antd\";\nimport { Button, Form, Input } from \"antd\";\nconst { Content } = Layout;\n\nconst PostEntry = ({\n  isLoading,\n  isPosting,\n  post,\n  user,\n  match,\n  location,\n  isEditMode,\n  toggleEdit,\n  editChanges,\n  confirmEdit,\n  classes\n}) => {\n  const [showValidationErrors, toggleValidationErrors] = useState(false);\n\n  // prettier-ignore\n  const validations = (post => {\n    return {\n      title: (field => field && field.length >= 3 && field.length <= 250)(post.title),\n      body: (field => field && field.length >= 3)(post.body)\n    }\n  })(post);\n\n  const isFieldInvalid = field =>\n    isEditMode && showValidationErrors && !validations[field];\n\n  const validate = () => {\n    const anyInvalid = Object.keys(validations).some(\n      field => !validations[field]\n    );\n\n    if (!anyInvalid) {\n      toggleValidationErrors(false);\n      confirmEdit(post);\n    } else {\n      toggleValidationErrors(true);\n    }\n  };\n\n  return (\n    <QueueAnim delay={50} duration={[500, 0]} type=\"left\">\n      <Content className={classes.container} key=\"postEntry\">\n        <div className={classes.headerContainer}>\n          <Breadcrumb className={classes.pageBreadcrumbsSection} separator=\">\">\n            <Breadcrumb.Item>Page</Breadcrumb.Item>\n            <Breadcrumb.Item>\n              <Link to=\"/\"> Posts </Link>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>\n              <Link\n                to={`/posts/${match.params.postId}${location.search || \"\"}`}\n              >\n                {post ? post.title : \"\"}\n              </Link>\n            </Breadcrumb.Item>\n          </Breadcrumb>\n\n          <div className={classes.actionsContainer}>\n            {isEditMode && (\n              <Button\n                type=\"primary\"\n                className={classes.button}\n                style={{ marginRight: 10 }}\n                onClick={() => {\n                  validate(post);\n                }}\n                disabled={isPosting}\n              >\n                Save\n              </Button>\n            )}\n            <Button\n              type=\"primary\"\n              className={classes.button}\n              style={{ marginRight: 10 }}\n              onClick={() => {\n                toggleEdit(!isEditMode);\n              }}\n              disabled={isPosting}\n            >\n              {isEditMode ? \"Cancel\" : \"Edit\"}\n            </Button>\n          </div>\n        </div>\n\n        <div>\n          {isLoading ? (\n            <div className={classes.paperContainer}>\n              <div className={classes.spinner}>\n                <Spin size=\"large\" />\n              </div>\n            </div>\n          ) : (\n            <Row gutter={16}>\n              <Col xs={24} lg={18} style={{ paddingBottom: 8 }}>\n                <div className={classes.paperContainer}>\n                  <Form layout=\"vertical\">\n                    <Form.Item\n                      className={classes.titleContainer}\n                      validateStatus={isFieldInvalid(\"title\") ? \"error\" : \"\"}\n                      help={\n                        isFieldInvalid(\"title\") &&\n                        \"Title is mandatory, 3 to 100 characters.\"\n                      }\n                    >\n                      {isEditMode ? (\n                        <Input\n                          placeholder=\"Title\"\n                          value={post.title}\n                          onChange={e => editChanges(\"title\", e.target.value)}\n                          className={`${classes.title} ${\n                            isEditMode\n                              ? classes.inputText\n                              : classes.inputDisabled\n                          }`}\n                          disabled={!isEditMode}\n                        />\n                      ) : (\n                        <span\n                          className={`${classes.title} ${\n                            classes.inputDisabled\n                          }`}\n                        >\n                          {post.title}\n                        </span>\n                      )}\n                    </Form.Item>\n\n                    <Form.Item\n                      className={classes.inputContainer}\n                      validateStatus={isFieldInvalid(\"body\") ? \"error\" : \"\"}\n                      help={\n                        isFieldInvalid(\"body\") &&\n                        \"Body is mandatory, at least 3 characters.\"\n                      }\n                    >\n                      <Input.TextArea\n                        autosize={{ minRows: 1, maxRows: 9 }}\n                        placeholder=\"Body\"\n                        value={post.body}\n                        onChange={e => editChanges(\"body\", e.target.value)}\n                        className={`${\n                          isEditMode ? classes.inputText : classes.inputDisabled\n                        }`}\n                        disabled={!isEditMode}\n                      />\n                    </Form.Item>\n                  </Form>\n                </div>\n              </Col>\n              <Col xs={24} lg={6} style={{ paddingBottom: 8 }}>\n                <div className={classes.paperContainer}>\n                  <span className={classes.subtitle}>Post #{post.id}</span>\n                  <br />\n                  {user && (\n                    <>\n                      by {user.name}\n                      <br />\n                      <br />@{user.username}\n                      <br />\n                      {user.email}\n                      <br />\n                      {user.address &&\n                        `${user.address.city} - ${user.address.zipcode}`}\n                      <br />\n                      {user.company && user.company.name}\n                    </>\n                  )}\n                </div>\n              </Col>\n            </Row>\n          )}\n        </div>\n\n        <Prompt\n          when={isEditMode}\n          message=\"You may have unsaved changes, are you sure you want to leave?\"\n        />\n      </Content>\n    </QueueAnim>\n  );\n};\n\nexport default withStyles(styles)(PostEntry);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport qs from \"qs\";\n\nimport {\n  fetchPostOwner,\n  persistPost\n} from \"../../../redux/actions/postsAction\";\nimport PostEntryView from \"./postEntryView\";\n\nclass PostEntry extends React.Component {\n  state = {\n    postForm: null,\n    isEditMode: false\n  };\n\n  componentDidMount() {\n    if (this.props.postEntry)\n      this.props.fetchOwner(this.props.postEntry.userId).then(r => {\n        const query = qs.parse(this.props.location.search, {\n          ignoreQueryPrefix: true\n        });\n\n        if (query.edit && query.edit === \"true\") this.toggleEdit(true);\n      });\n    else this.props.history.push(\"/404\");\n  }\n\n  editChanges = (field, value, callback) =>\n    this.setState(\n      { postForm: { ...this.state.postForm, [field]: value } },\n      () => callback && callback()\n    );\n\n  toggleEdit = toggle =>\n    this.setState({\n      isEditMode: toggle,\n      postForm: toggle ? Object.assign({}, this.props.postEntry) : null\n    });\n\n  saveChanges = async post => {\n    const result = await this.props.savePost(post);\n\n    if (result.payload && result.payload.post) this.toggleEdit(false);\n  };\n\n  render() {\n    return (\n      <PostEntryView\n        isLoading={this.props.isLoading}\n        isPosting={this.props.isPosting}\n        post={\n          this.state.isEditMode\n            ? this.state.postForm\n            : this.props.postEntry || {}\n        }\n        user={this.props.userEntry}\n        match={this.props.match}\n        location={this.props.location}\n        isEditMode={this.state.isEditMode}\n        toggleEdit={this.toggleEdit}\n        editChanges={this.editChanges}\n        confirmEdit={this.saveChanges}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  isLoading: state.page.fetchCallsInProgress > 0,\n  isPosting: state.page.postCallsInProgress > 0,\n  postEntry: state.posts.entries.find(\n    p => p.id === parseInt(ownProps.match.params.postId)\n  ),\n  userEntry: state.posts.userEntry\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchOwner: id => dispatch(fetchPostOwner(id)),\n  savePost: post => dispatch(persistPost(post))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostEntry);\n","import React from \"react\";\nimport Exception from \"ant-design-pro/lib/Exception\";\nimport QueueAnim from \"rc-queue-anim\";\n\nconst InvalidRoute = () => {\n  return (\n    <QueueAnim delay={50} duration={[500, 0]} type=\"left\">\n      <Exception\n        key=\"404\"\n        backText=\"Perhaps lets go back to the start\"\n        type=\"404\"\n        desc=\"Looks like you got lost\"\n      />\n    </QueueAnim>\n  );\n};\n\nexport default InvalidRoute;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport PostList from \"../../posts/postList/postList\";\nimport PostEntry from \"../../posts/postEntry/postEntry\";\n\nimport InvalidRoute from \"./invalidRoute\";\n\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={PostList} />\n    <Route exact path=\"/posts/:postId\" component={PostEntry} />\n\n    <Route component={InvalidRoute} />\n  </Switch>\n);\n","const height = 64;\n\nconst styles = theme => ({\n  container: {\n    position: \"fixed\",\n    zIndex: 1,\n    width: \"100%\",\n    height,\n    paddingLeft: 30,\n    paddingRight: 30,\n    backgroundColor: theme.dark\n  },\n\n  flex: {\n    display: \"flex\",\n    alignItems: \"center\",\n    color: theme.paper\n  },\n  flexRight: {\n    flexGrow: 1,\n    textAlign: \"right\"\n  },\n\n  icon: {\n    backgroundColor: theme.dark,\n    marginRight: 5\n  },\n\n  button: {\n    backgroundColor: theme.secondaryColor,\n    borderColor: theme.secondaryColor,\n    color: theme.paper,\n    \"&:hover\": {\n      backgroundColor: theme.secondaryColorHover,\n      borderColor: theme.secondaryColorHover,\n      color: theme.paper\n    }\n  }\n});\n\nexport default styles;\n","import React from \"react\";\nimport withStyles from \"react-jss\";\nimport { Layout, Row, Col, Avatar, Button } from \"antd\";\nimport QueueAnim from \"rc-queue-anim\";\n\nimport styles from \"./navStyles\";\n\nconst Nav = ({ resetData, isLoading, classes }) => {\n  return (\n    <QueueAnim delay={50} duration={[500, 0]} type=\"top\">\n      <Layout.Header className={classes.container} key=\"navbar\">\n        <Row\n          type=\"flex\"\n          align=\"middle\"\n          justify=\"start\"\n          gutter={16}\n          style={{ height: \"100%\" }}\n        >\n          <Col className={classes.flex}>\n            <Avatar\n              className={classes.icon}\n              src=\"https://icon2.kisspng.com/20180720/jaa/kisspng-text-naruto-sticker-logo-idcard-5b51c236763454.8572265815320847904842.jpg\"\n            />\n            <div>Posterino</div>\n          </Col>\n          <Col className={classes.flexRight}>\n            <Button\n              className={classes.button}\n              disabled={isLoading}\n              onClick={resetData}\n            >\n              Default data\n            </Button>\n          </Col>\n        </Row>\n      </Layout.Header>\n    </QueueAnim>\n  );\n};\n\nexport default withStyles(styles)(Nav);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchPosts } from \"../../../redux/actions/postsAction\";\nimport NavView from \"./navView\";\n\nclass NavComponent extends React.Component {\n  resetData = () => {\n    this.props.fetchPosts();\n  };\n\n  render() {\n    return (\n      <NavView resetData={this.resetData} isLoading={this.props.isLoading} />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  isLoading:\n    state.page.postCallsInProgress > 1 || state.page.fetchCallsInProgress > 1\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPosts: () => dispatch(fetchPosts(true))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NavComponent);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { notification } from \"antd\";\n\nimport {\n  clearNotification,\n  clearError\n} from \"../../../redux/actions/pageActions\";\n\nclass ToastContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.notification = notification;\n\n    notification.config({\n      placement: \"bottomRight\"\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const newMessages =\n      this.props.notifications &&\n      this.props.notifications.filter(\n        item => !prevProps.notifications.some(prev => prev.key === item.key)\n      );\n    const newErrors =\n      this.props.errors &&\n      this.props.errors.filter(\n        item => !prevProps.errors.some(prev => prev.key === item.key)\n      );\n\n    if (newMessages && newMessages.length > 0)\n      newMessages.forEach(notification => {\n        this.notification.success({\n          key: notification.key,\n          message: \"Success\",\n          description: notification.message,\n          onClose: () => this.props.clearError(notification.key)\n        });\n      });\n\n    if (newErrors && newErrors.length > 0)\n      newErrors.forEach(notification => {\n        this.notification.error({\n          key: notification.key,\n          message: \"Error\",\n          description: notification.message,\n          duration: 3,\n          onClose: () => this.props.clearError(notification.key)\n        });\n      });\n  }\n\n  render() {\n    return <div />;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  errors: state.page.errorMessages,\n  notifications: state.page.notificationMessages\n});\n\nconst mapDispatchToProps = dispatch => ({\n  clearNotification: notificationKey =>\n    dispatch(clearNotification(notificationKey)),\n  clearError: errorKey => dispatch(clearError(errorKey))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ToastContainer);\n","import { CLEAR_NOTIFICATION, CLEAR_ERROR } from \"./actionTypes\";\n\nexport function clearNotification(notificationKey) {\n  return { type: CLEAR_NOTIFICATION, payload: { key: notificationKey } };\n}\nexport function clearError(errorKey) {\n  return { type: CLEAR_ERROR, payload: { key: errorKey } };\n}\n","const theme = {\n  primaryColor: \"#ee7441 !important\",\n  primaryColorHover: \"#ff9900 !important\",\n  secondaryColor: \"#42519e !important\",\n  secondaryColorHover: \"#0c2edf !important\",\n\n  dark: \"#0b0b0b !important\",\n  paper: \"#fff !important\"\n};\n\nexport default theme;\n","export default {\n  posts: {\n    entries: [],\n    userEntry: null\n  },\n  page: {\n    fetchCallsInProgress: 0,\n    postCallsInProgress: 0,\n\n    errorMessages: [],\n    notificationMessages: []\n  }\n};\n","import {\n  FETCH_POSTS_SUCCESS,\n  DELETE_POST_SUCCESS,\n  PERSIST_POST_SUCCESS,\n  FETCH_OWNER_SUCCESS\n} from \"../actions/actionTypes\";\nimport defaultState from \"../store/defaultState\";\n\nconst postsReducer = (state = defaultState.posts, action) => {\n  switch (action.type) {\n    case FETCH_POSTS_SUCCESS:\n      return {\n        ...state,\n        entries: action.payload.posts\n      };\n\n    case DELETE_POST_SUCCESS:\n      return {\n        ...state,\n        entries: state.entries.filter(post => post.id !== action.payload.id)\n      };\n\n    case PERSIST_POST_SUCCESS:\n      return {\n        ...state,\n        entries: state.entries.map(post =>\n          post.id === action.payload.post.id ? action.payload.post : post\n        )\n      };\n\n    case FETCH_OWNER_SUCCESS:\n      return {\n        ...state,\n        userEntry: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import defaultState from \"../store/defaultState\";\nimport { CLEAR_NOTIFICATION, CLEAR_ERROR } from \"../actions/actionTypes\";\n\nfunction actionType(action) {\n  return action.split(\"_\")[0];\n}\n\nfunction actionStatus(action) {\n  return action.split(\"_\").pop();\n}\n\nconst pageReducer = (state = defaultState.page, action) => {\n  switch (actionType(action.type)) {\n    case \"FETCH\": {\n      switch (actionStatus(action.type)) {\n        case \"REQUEST\":\n          return {\n            ...state,\n            fetchCallsInProgress: state.fetchCallsInProgress + 1\n          };\n        case \"SUCCESS\":\n          return {\n            ...state,\n            fetchCallsInProgress: state.fetchCallsInProgress - 1,\n            notificationMessages:\n              action.payload.message && action.payload.message.length > 1\n                ? [\n                    ...state.notificationMessages,\n                    {\n                      key: new Date().toISOString().replace(/-/g, \"\"),\n                      message: action.payload.message\n                    }\n                  ]\n                : state.notificationMessages\n          };\n        case \"FAILURE\":\n          return {\n            ...state,\n            fetchCallsInProgress: state.fetchCallsInProgress - 1,\n            errorMessages:\n              action.payload.message && action.payload.message.length > 1\n                ? [\n                    ...state.errorMessages,\n                    {\n                      key: new Date().toISOString().replace(/-/g, \"\"),\n                      message: action.payload.message,\n                      code: action.payload.statusCode\n                    }\n                  ]\n                : state.errorMessages\n          };\n        default:\n          return state;\n      }\n    }\n    case \"PERSIST\": {\n      switch (actionStatus(action.type)) {\n        case \"REQUEST\":\n          return {\n            ...state,\n            postCallsInProgress: state.postCallsInProgress + 1\n          };\n        case \"SUCCESS\":\n          return {\n            ...state,\n            postCallsInProgress: state.postCallsInProgress - 1,\n            notificationMessages:\n              action.payload.message && action.payload.message.length > 1\n                ? [\n                    ...state.notificationMessages,\n                    {\n                      key: new Date().toISOString().replace(/-/g, \"\"),\n                      message: action.payload.message\n                    }\n                  ]\n                : state.notificationMessages\n          };\n        case \"FAILURE\":\n          return {\n            ...state,\n            postCallsInProgress: state.postCallsInProgress - 1,\n            errorMessages:\n              action.payload.message && action.payload.message.length > 1\n                ? [\n                    ...state.errorMessages,\n                    {\n                      key: new Date().toISOString().replace(/-/g, \"\"),\n                      message: action.payload.message,\n                      code: action.payload.statusCode\n                    }\n                  ]\n                : state.errorMessages\n          };\n        default:\n          return state;\n      }\n    }\n    case \"CLEAR\": {\n      switch (action.type) {\n        case CLEAR_NOTIFICATION:\n          return {\n            ...state,\n            notificationMessages: state.notificationMessages.filter(\n              message => message.key !== action.payload.key\n            )\n          };\n        case CLEAR_ERROR:\n          return {\n            ...state,\n            errorMessages: state.errorMessages.filter(\n              error => error.key !== action.payload.key\n            )\n          };\n        default:\n          return state;\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default pageReducer;\n","import { combineReducers } from \"redux\";\nimport postsReducer from \"./postsReducer\";\nimport pageReducer from \"./pageReducer\";\n\nexport default combineReducers({\n  posts: postsReducer,\n  page: pageReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\n\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { composeWithDevTools as composeWithDevToolsLogOnly } from \"redux-devtools-extension/logOnly\";\n\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: storage,\n  stateReconciler: autoMergeLevel2,\n  whitelist: [\"posts\"]\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function configureStore(initialState) {\n  let store = createStore(\n    persistedReducer,\n    initialState,\n    process.env.NODE_ENV === \"production\"\n      ? composeWithDevToolsLogOnly(applyMiddleware(thunk))\n      : composeWithDevTools(applyMiddleware(thunk))\n  );\n\n  let persistor = persistStore(store);\n\n  return { store, persistor };\n}\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport { ThemeProvider } from \"react-jss\";\nimport { Layout } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"ant-design-pro/dist/ant-design-pro.css\";\n\nimport routes from \"./components/page/routes\";\nimport Nav from \"./components/page/nav/nav\";\nimport ToastContainer from \"./components/page/notification/toast\";\nimport posterinoTheme from \"./style/theme\";\nimport configureStore from \"./redux/store/configureStore\";\n\nconst storeConfig = configureStore();\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Provider store={storeConfig.store}>\n          <PersistGate loading={<div>loading</div>} persistor={storeConfig.persistor}>\n            <HashRouter basename='/'>\n              <ThemeProvider theme={posterinoTheme}>\n                <Layout>\n                  <Nav />\n\n                  <Layout style={{ marginTop: 64, height: `calc(100vh - 64px)` }}>\n                    <Layout style={{ overflowY: \"auto\" }}>\n                      {routes}\n                      <ToastContainer />\n                    </Layout>\n                    <Layout.Footer style={{ textAlign: \"center\" }}>\n                      Posterino ©2019 Created by GLuersen\n                    </Layout.Footer>\n                  </Layout>\n                </Layout>\n              </ThemeProvider>\n            </HashRouter>\n          </PersistGate>\n        </Provider>,\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./app\";\nimport \"./style/index.css\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}